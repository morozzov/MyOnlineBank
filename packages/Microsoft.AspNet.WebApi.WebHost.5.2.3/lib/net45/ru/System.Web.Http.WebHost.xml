<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Web.Http.WebHost</name>
  </assembly>
  <members>
    <member name="T:System.Web.Http.GlobalConfiguration">
      <summary> Реализует глобальную <see cref="T:System.Web.Http.HttpConfiguration" /> для приложений ASP.NET. </summary>
    </member>
    <member name="P:System.Web.Http.GlobalConfiguration.Configuration"></member>
    <member name="M:System.Web.Http.GlobalConfiguration.Configure(System.Action{System.Web.Http.HttpConfiguration})"></member>
    <member name="P:System.Web.Http.GlobalConfiguration.DefaultHandler"></member>
    <member name="P:System.Web.Http.GlobalConfiguration.DefaultServer">
      <summary> Возвращает глобальную <see cref="T:System.Web.Http.HttpServer" />. </summary>
      <returns>Глобальный <see cref="T:System.Web.Http.HttpServer" />.</returns>
    </member>
    <member name="T:System.Web.Http.RouteCollectionExtensions">
      <summary> Методы расширения для <see cref="T:System.Web.Routing.RouteCollection" />.</summary>
    </member>
    <member name="M:System.Web.Http.RouteCollectionExtensions.MapHttpRoute(System.Web.Routing.RouteCollection,System.String,System.String)">
      <summary>Сопоставляет указанный шаблон маршрута.</summary>
      <returns>Ссылка на сопоставленный маршрут.</returns>
      <param name="routes">Коллекция маршрутов для приложения.</param>
      <param name="name">Имя сопоставляемого маршрута.</param>
      <param name="routeTemplate">Шаблон маршрута.</param>
    </member>
    <member name="M:System.Web.Http.RouteCollectionExtensions.MapHttpRoute(System.Web.Routing.RouteCollection,System.String,System.String,System.Object)">
      <summary>Сопоставляет заданный шаблон маршрута, задает маршрут по умолчанию.</summary>
      <returns>Ссылка на сопоставленный маршрут.</returns>
      <param name="routes">Коллекция маршрутов для приложения.</param>
      <param name="name">Имя сопоставляемого маршрута.</param>
      <param name="routeTemplate">Шаблон маршрута.</param>
      <param name="defaults">Объект, содержащий значения маршрута по умолчанию.</param>
    </member>
    <member name="M:System.Web.Http.RouteCollectionExtensions.MapHttpRoute(System.Web.Routing.RouteCollection,System.String,System.String,System.Object,System.Object)">
      <summary>Сопоставляет заданный шаблон маршрута, задает значения маршрута по умолчанию и ограничения.</summary>
      <returns>Ссылка на сопоставленный маршрут.</returns>
      <param name="routes">Коллекция маршрутов для приложения.</param>
      <param name="name">Имя сопоставляемого маршрута.</param>
      <param name="routeTemplate">Шаблон маршрута.</param>
      <param name="defaults">Объект, содержащий значения маршрута по умолчанию.</param>
      <param name="constraints">Набор выражений, задающих значения для routeTemplate.</param>
    </member>
    <member name="M:System.Web.Http.RouteCollectionExtensions.MapHttpRoute(System.Web.Routing.RouteCollection,System.String,System.String,System.Object,System.Object,System.Net.Http.HttpMessageHandler)">
      <summary>Сопоставляет заданный шаблон маршрута и задает значения маршрута по умолчанию, ограничения и обработчик сообщений конечных точек.</summary>
      <returns>Ссылка на сопоставленный маршрут.</returns>
      <param name="routes">Коллекция маршрутов для приложения.</param>
      <param name="name">Имя сопоставляемого маршрута.</param>
      <param name="routeTemplate">Шаблон маршрута.</param>
      <param name="defaults">Объект, содержащий значения маршрута по умолчанию.</param>
      <param name="constraints">Набор выражений, задающих значения для routeTemplate.</param>
      <param name="handler">Обработчик, которому будет отправлено сообщение.</param>
    </member>
    <member name="T:System.Web.Http.WebHost.HttpControllerHandler">
      <summary>
        <see cref="T:System.Web.IHttpTaskAsyncHandler" />, который передает запросы ASP.NET в конвейер <see cref="T:System.Web.Http.HttpServer" /> и пишет результат обратно.</summary>
    </member>
    <member name="M:System.Web.Http.WebHost.HttpControllerHandler.#ctor(System.Web.Routing.RouteData)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Web.Http.WebHost.HttpControllerHandler" />.</summary>
      <param name="routeData">Данные маршрута.</param>
    </member>
    <member name="M:System.Web.Http.WebHost.HttpControllerHandler.#ctor(System.Web.Routing.RouteData,System.Net.Http.HttpMessageHandler)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Web.Http.WebHost.HttpControllerHandler" />.</summary>
      <param name="routeData">Данные маршрута.</param>
      <param name="handler">Обработчик сообщений для распределения запросов.</param>
    </member>
    <member name="M:System.Web.Http.WebHost.HttpControllerHandler.ProcessRequestAsync(System.Web.HttpContext)">
      <summary>Предоставляет код, обрабатывающий асинхронную задачу.</summary>
      <returns>Асинхронная задача.</returns>
      <param name="context">Контекст HTTP.</param>
    </member>
    <member name="T:System.Web.Http.WebHost.HttpControllerRouteHandler">
      <summary>
        <see cref="T:System.Web.Routing.IRouteHandler" />, который возвращает экземпляры <see cref="T:System.Web.Http.WebHost.HttpControllerHandler" />, которые могут передавать запросы данному экземпляру <see cref="T:System.Web.Http.HttpServer" />. </summary>
    </member>
    <member name="M:System.Web.Http.WebHost.HttpControllerRouteHandler.#ctor">
      <summary> Инициализирует новый экземпляр класса <see cref="T:System.Web.Http.WebHost.HttpControllerRouteHandler" />. </summary>
    </member>
    <member name="M:System.Web.Http.WebHost.HttpControllerRouteHandler.GetHttpHandler(System.Web.Routing.RequestContext)">
      <summary> Предоставляет объект, который обрабатывает запрос. </summary>
      <returns> Объект, который обрабатывает запрос. </returns>
      <param name="requestContext">Объект, инкапсулирующий сведения о запросе.</param>
    </member>
    <member name="P:System.Web.Http.WebHost.HttpControllerRouteHandler.Instance">
      <summary> Получает экземпляр-синглтон <see cref="T:System.Web.Http.WebHost.HttpControllerRouteHandler" />. </summary>
    </member>
    <member name="M:System.Web.Http.WebHost.HttpControllerRouteHandler.System#Web#Routing#IRouteHandler#GetHttpHandler(System.Web.Routing.RequestContext)">
      <summary> Предоставляет объект, который обрабатывает запрос. </summary>
      <returns> Объект, который обрабатывает запрос. </returns>
      <param name="requestContext">Объект, инкапсулирующий сведения о запросе.</param>
    </member>
    <member name="T:System.Web.Http.WebHost.PreApplicationStartCode">
      <summary>Предоставляет точку регистрации для предварительного кода запуска простого членства.</summary>
    </member>
    <member name="M:System.Web.Http.WebHost.PreApplicationStartCode.Start">
      <summary>Регистрирует предварительный код запуска простого членства.</summary>
    </member>
    <member name="T:System.Web.Http.WebHost.WebHostBufferPolicySelector">
      <summary>Представляет селектор политик буфера веб-узла.</summary>
    </member>
    <member name="M:System.Web.Http.WebHost.WebHostBufferPolicySelector.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Web.Http.WebHost.WebHostBufferPolicySelector" />.</summary>
    </member>
    <member name="M:System.Web.Http.WebHost.WebHostBufferPolicySelector.UseBufferedInputStream(System.Object)">
      <summary>Получает значение, указывающее, должен ли узел буферизовать тело объекта запроса HTTP.</summary>
      <returns>Значение true, если буферизация должна использоваться; в противном случае следует использовать потоковый запрос.</returns>
      <param name="hostContext">Контекст узла.</param>
    </member>
    <member name="M:System.Web.Http.WebHost.WebHostBufferPolicySelector.UseBufferedOutputStream(System.Net.Http.HttpResponseMessage)">
      <summary>Использует для веб-узла выходной поток с буферизацией.</summary>
      <returns>Буферизованный выходной поток.</returns>
      <param name="response">Ответ.</param>
    </member>
    <member name="T:System.Web.Http.WebHost.WebHostExceptionCatchBlocks">
      <summary>Предоставляет блоки catch, используемые в данной сборке.</summary>
    </member>
    <member name="P:System.Web.Http.WebHost.WebHostExceptionCatchBlocks.HttpControllerHandlerBufferContent">
      <summary>Получает метку для блока catch в System.Web.Http.WebHost.HttpControllerHandler.WriteBufferedResponseContentAsync.</summary>
      <returns>Метка для блока catch в System.Web.Http.WebHost.HttpControllerHandler.WriteBufferedResponseContentAsync.</returns>
    </member>
    <member name="P:System.Web.Http.WebHost.WebHostExceptionCatchBlocks.HttpControllerHandlerBufferError">
      <summary>Получает метку для блока catch в System.Web.Http.WebHost.HttpControllerHandler.WriteErrorResponseContentAsync.</summary>
      <returns>Метка для блока catch в System.Web.Http.WebHost.HttpControllerHandler.WriteErrorResponseContentAsync.</returns>
    </member>
    <member name="P:System.Web.Http.WebHost.WebHostExceptionCatchBlocks.HttpControllerHandlerComputeContentLength">
      <summary>Получает метку для блока catch в System.Web.Http.WebHost.HttpControllerHandler.ComputeContentLength.</summary>
      <returns>Метка для блока catch в System.Web.Http.WebHost.HttpControllerHandler.ComputeContentLength.</returns>
    </member>
    <member name="P:System.Web.Http.WebHost.WebHostExceptionCatchBlocks.HttpControllerHandlerStreamContent">
      <summary>Получает метку для блока catch в System.Web.Http.WebHost.HttpControllerHandler.WriteStreamedResponseContentAsync.</summary>
      <returns>Метка для блока catch в System.Web.Http.WebHost.HttpControllerHandler.WriteStreamedResponseContentAsync.</returns>
    </member>
    <member name="P:System.Web.Http.WebHost.WebHostExceptionCatchBlocks.HttpWebRoute">
      <summary>Получает метку для блока catch в System.Web.Http.WebHost.WebHostExceptionCatchBlocks.HttpWebRoute.GetRouteData.</summary>
      <returns>Блок catch в System.Web.Http.WebHost.WebHostExceptionCatchBlocks.HttpWebRoute.GetRouteData.</returns>
    </member>
  </members>
</doc>